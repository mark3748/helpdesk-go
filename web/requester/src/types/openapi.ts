/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/healthz": {
    /** Health check */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              ok?: boolean;
            };
          };
        };
      };
    };
  };
  "/login": {
    /**
     * Login (local mode)
     * @description Enabled only when `AUTH_MODE=local`.
     */
    post: {
      requestBody: {
        content: {
          "application/json": {
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/logout": {
    /** Logout (local mode) */
    post: {
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
      };
    };
  };
  "/me": {
    /** Current user */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AuthUser"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
      };
    };
  };
  "/events": {
    /**
     * Event stream
     * @description Server-sent events for ticket and queue updates. Supports `Last-Event-ID` header to resume from a given event. Each event data is an `EventEnvelope` JSON.
     */
    get: {
      parameters: {
        header?: {
          "Last-Event-ID"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "text/event-stream": string;
          };
        };
      };
    };
  };
  "/users/{id}/roles": {
    /** List roles for a user */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": string[];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
    /** Add role to a user */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/users/{id}/roles/{role}": {
    /** Remove role from a user */
    delete: {
      parameters: {
        path: {
          id: string;
          role: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tickets": {
    /** List tickets */
    get: {
      parameters: {
        query?: {
          status?: string[];
          priority?: number[];
          team?: string;
          assignee?: string;
          q?: string;
          cursor?: string;
          limit?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              items?: components["schemas"]["Ticket"][];
              next_cursor?: string | null;
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
    /** Create ticket */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateTicketRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": {
              /** Format: uuid */
              id?: string;
              number?: string;
              status?: string;
            };
          };
        };
        /** @description Validation error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationError"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tickets/{id}": {
    /** Get ticket */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Ticket"];
          };
        };
        /** @description Not Found */
        404: {
          content: never;
        };
      };
    };
    /**
     * Update ticket
     * @description Requires `agent` role.
     */
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateTicketRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tickets/{id}/comments": {
    /** List public comments */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Comment"][];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
    /** Add comment */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CommentRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": {
              /** Format: uuid */
              id?: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tickets/{id}/attachments": {
    /** List attachments */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Attachment"][];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
    /** Upload attachment */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": {
              /** Format: uuid */
              id?: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tickets/{id}/attachments/{attID}": {
    /** Download attachment */
    get: {
      parameters: {
        path: {
          id: string;
          attID: string;
        };
      };
      responses: {
        /** @description File content */
        200: {
          content: {
            "application/octet-stream": string;
          };
        };
        /** @description Redirect to object storage */
        302: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
    /** Delete attachment */
    delete: {
      parameters: {
        path: {
          id: string;
          attID: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tickets/{id}/watchers": {
    /** List watcher user IDs */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": string[];
          };
        };
      };
    };
    /** Add watcher */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["WatcherRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tickets/{id}/watchers/{userID}": {
    /** Remove watcher */
    delete: {
      parameters: {
        path: {
          id: string;
          userID: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/csat/{token}": {
    /**
     * Submit CSAT score
     * @description Public endpoint embedded in emails.
     */
    get: {
      parameters: {
        query: {
          score: "good" | "bad";
        };
        path: {
          token: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Invalid score */
        400: {
          content: never;
        };
        /** @description Invalid token */
        404: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/metrics/sla": {
    /**
     * SLA attainment
     * @description Requires `agent` role.
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              total?: number;
              met?: number;
              sla_attainment?: number;
            };
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/metrics/resolution": {
    /**
     * Average resolution time
     * @description Requires `agent` role.
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              avg_resolution_ms?: number;
            };
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/metrics/tickets": {
    /**
     * Ticket volume per day (30)
     * @description Requires `agent` role.
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              daily?: {
                  /** Format: date */
                  day?: string;
                  count?: number;
                }[];
            };
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/exports/tickets": {
    /**
     * Export tickets to CSV
     * @description Requires object store configuration. Requires `agent` role.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ExportTicketsRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              /** Format: uri */
              url?: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/requesters": {
    /** Create requester */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateRequesterRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Requester"];
          };
        };
        /** @description Validation error */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/requesters/{id}": {
    /** Get requester */
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Requester"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: never;
        };
      };
    };
    /** Update requester */
    patch: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateRequesterRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Requester"];
          };
        };
        /** @description Validation error */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: never;
        };
      };
    };
  };
  "/queues": {
    /** List queues */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Queue"][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tickets/{id}/assign": {
    /** Assign ticket */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: uuid */
            assignee_id?: string | null;
            /** Format: uuid */
            queue_id?: string | null;
          };
        };
      };
      responses: {
        /** @description No Content */
        204: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tickets/{id}/attachments/presign-upload": {
    /** Presign attachment upload */
    post: {
      parameters: {
        path: {
          id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["PresignUploadRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PresignUploadResponse"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/tickets/{id}/attachments/{attID}/presign-download": {
    /** Presign attachment download */
    post: {
      parameters: {
        path: {
          id: string;
          attID: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PresignDownloadResponse"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          content: never;
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
  "/settings/oidc": {
    /** Get OIDC settings */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["OIDCSettings"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update OIDC settings */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["OIDCSettings"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/settings/mail": {
    /** Get mail settings */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["MailSettings"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update mail settings */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["MailSettings"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/settings/mail/test": {
    /** Test outbound mail */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** Format: email */
            to?: string;
          };
        };
      };
      responses: {
        /** @description Accepted */
        202: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Server Error */
        500: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AuthUser: {
      /** Format: uuid */
      id?: string;
      external_id?: string;
      /** Format: email */
      email?: string;
      display_name?: string;
      roles?: string[];
    };
    Ticket: {
      /** Format: uuid */
      id?: string;
      number?: string;
      title?: string;
      description?: string;
      /** Format: uuid */
      requester_id?: string;
      /** Format: uuid */
      assignee_id?: string | null;
      /** Format: uuid */
      team_id?: string | null;
      /** Format: uuid */
      queue_id?: string | null;
      priority?: number;
      urgency?: number | null;
      category?: string | null;
      subcategory?: string | null;
      /** @enum {string} */
      status?: "open" | "pending" | "on_hold" | "resolved" | "closed";
      /** Format: date-time */
      scheduled_at?: string | null;
      /** Format: date-time */
      due_at?: string | null;
      /** @enum {string} */
      source?: "email" | "web" | "phone" | "api";
      custom_json?: Record<string, never>;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      sla?: components["schemas"]["SLAStatus"];
    };
    SLAStatus: {
      /** Format: uuid */
      policy_id?: string;
      response_elapsed_ms?: number;
      resolution_elapsed_ms?: number;
      response_target_mins?: number;
      resolution_target_mins?: number;
      paused?: boolean;
      reason?: string | null;
    };
    Comment: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      ticket_id?: string;
      /** Format: uuid */
      author_id?: string;
      body_md?: string;
      is_internal?: boolean;
      /** Format: date-time */
      created_at?: string;
    };
    Attachment: {
      /** Format: uuid */
      id?: string;
      filename?: string;
      /** Format: int64 */
      bytes?: number;
      content_type?: string | null;
      /** Format: date-time */
      created_at?: string;
    };
    CreateTicketRequest: {
      title: string;
      description?: string;
      /** Format: uuid */
      requester_id?: string;
      requester?: components["schemas"]["CreateRequesterRequest"];
      priority: number;
      urgency?: number;
      category?: string;
      subcategory?: string;
      custom_json?: Record<string, never>;
    };
    UpdateTicketRequest: {
      status?: string;
      /** Format: uuid */
      assignee_id?: string;
      priority?: number;
      urgency?: number;
      /** Format: date-time */
      scheduled_at?: string;
      /** Format: date-time */
      due_at?: string;
      custom_json?: Record<string, never>;
    };
    CommentRequest: {
      body_md: string;
      is_internal?: boolean;
      /** Format: uuid */
      author_id?: string;
    };
    WatcherRequest: {
      /** Format: uuid */
      user_id: string;
    };
    RoleRequest: {
      role: string;
    };
    ExportTicketsRequest: {
      ids: string[];
    };
    ValidationError: {
      errors?: {
        [key: string]: string;
      };
    };
    Requester: {
      /** Format: uuid */
      id?: string;
      /** Format: email */
      email?: string | null;
      phone?: string | null;
      display_name?: string;
      profile?: Record<string, unknown> | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    CreateRequesterRequest: {
      /** Format: email */
      email?: string;
      phone?: string;
      display_name: string;
      profile?: Record<string, never>;
    };
    UpdateRequesterRequest: {
      /** Format: email */
      email?: string | null;
      phone?: string | null;
      display_name?: string;
      profile?: Record<string, never>;
    };
    Queue: {
      /** Format: uuid */
      id?: string;
      name?: string;
      description?: string | null;
    };
    EventEnvelope: {
      type?: string;
      /** Format: uuid */
      ticket_id?: string | null;
      payload?: Record<string, never>;
      /** Format: date-time */
      created_at?: string;
    };
    PresignUploadRequest: {
      filename: string;
      /** Format: int64 */
      bytes: number;
      mime: string;
    };
    PresignUploadResponse: {
      upload_url?: string;
      headers?: {
        [key: string]: string;
      };
      /** Format: uuid */
      attachment_id?: string;
    };
    PresignDownloadResponse: {
      download_url?: string;
      headers?: {
        [key: string]: string;
      };
    };
    OIDCSettings: {
      issuer?: string;
      client_id?: string;
      claim_path?: string;
      role_map?: {
        [key: string]: string[];
      };
      default_role?: string;
    };
    MailSettings: {
      host?: string;
      port?: number;
      username?: string;
      from?: string;
    };
    Error: {
      code?: string;
      message?: string;
      field_errors?: {
        [key: string]: string;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
